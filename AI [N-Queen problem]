import matplotlib.pyplot as plt
import numpy as np

class NQueens:
    def __init__(self, n):
        self.n = n
        self.board = [-1] * n  # -1 indicates no queen is placed in that row

    def is_safe(self, row, col):
        """
        Check if placing a queen at (row, col) is safe from other queens.
        A queen is safe if no other queen is in the same column or diagonals.
        """
        for prev_row in range(row):
            if self.board[prev_row] == col or abs(self.board[prev_row] - col) == abs(prev_row - row):
                return False
        return True

    def solve_backtracking(self, row=0):
        """
        Solve the problem using backtracking by placing queens one by one.
        Visualize the board after each step.
        """
        if row == self.n:
            self.visualize_board()  # Visualize the solution when we reach the end
            return True  # Solution found

        for col in range(self.n):
            if self.is_safe(row, col):
                self.board[row] = col  # Place queen
                self.visualize_board()  # Visualize the board after placing a queen
                if self.solve_backtracking(row + 1):
                    return True
                self.board[row] = -1  # Backtrack if no solution
                self.visualize_board()  # Visualize the board after backtracking
        return False  # No solution found in this branch

    def visualize_board(self):
        """
        Visualize the board using matplotlib.
        This function will be called step by step during the backtracking process.
        """
        grid = np.zeros((self.n, self.n))
        for row in range(self.n):
            if self.board[row] != -1:
                grid[row, self.board[row]] = 1

        fig, ax = plt.subplots(figsize=(3, 3))
        ax.matshow(grid, cmap="Blues", alpha=0.3)

        ax.set_xticks(np.arange(self.n+1) - 0.5, minor=True)
        ax.set_yticks(np.arange(self.n+1) - 0.5, minor=True)
        ax.grid(which='minor', color='black', linestyle='-', linewidth=2)

        for i in range(self.n):
            if self.board[i] != -1:
                ax.text(self.board[i], i, 'Q', ha='center', va='center', fontsize=16)

        ax.set_xticks(np.arange(self.n))
        ax.set_yticks(np.arange(self.n))
        ax.set_xticklabels([])
        ax.set_yticklabels([])
        ax.set_title(f"N-Queens Solution Step-by-Step ({self.n}x{self.n})", fontsize=14)

        plt.draw()
        plt.pause(1)  # Pause for 1 second to allow step-by-step visualization
        plt.clf()  # Clear the figure for the next step

# Example usage:
n = 4  # For 4x4 grid
nqueens = NQueens(n)

plt.ion()  # Turn on interactive mode for real-time plotting
nqueens.solve_backtracking()  # Solves the N-Queens problem using backtracking
plt.ioff()  # Turn off interactive mode after solving
plt.show()  # Show final state
